1. KMM_KC01:https://www.codewars.com/kata/5287e858c6b5a9678200083c/train/javascript
A Narcissistic Number is a number which is the sum of its own digits, each raised to the 
power of the number of digits in a given base.
In this Kata, we will restrict ourselves to decimal (base 10).

For example, take 153 (3 digits):
 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153

 and 1634 (4 digits):
  1^4 + 6^4 + 3^4 + 4^4 = 1 + 1296 + 81 + 256 = 1634

  The Challenge:

Your code must return true or false depending upon whether the given number is a Narcissistic
 number in base 10.

Error checking for text strings or other invalid inputs is not required, only valid integers 
will be passed into the function.

2.KMM_KC02 :https://www.codewars.com/kata/550498447451fbbd7600041c/train/javascript
Given two arrays a and b write a function comp(a, b) (compSame(a,b) in Clojure) that checks
whether the two arrays have the "same" elements, with the same multiplicities. "Same" means, 
here, that the elements in b are the elements in a squared, regardless of the order.

Examples
VALID ARRAYS:
a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 361, 25921, 361, 20736, 361]

comp(a, b) returns true because in b 121 is the square of 11, 14641 is the square of 121, 
20736 the square of 144, 361 the square of 19, 25921 the square of 161, and so on.
It gets obvious if we write b's elements in terms of squares:

a = [121, 144, 19, 161, 19, 144, 19, 11] 
b = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19]

INVALID ARRAYS:
If we change the first number to something else, comp may not return true anymore:
a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [132, 14641, 20736, 361, 25921, 361, 20736, 361]

comp(a,b) returns false because in b 132 is not the square of any number of a.
a = [121, 144, 19, 161, 19, 144, 19, 11]  
b = [121, 14641, 20736, 36100, 25921, 361, 20736, 361]

comp(a,b) returns false because in b 36100 is not the square of any number of a.

NOTE:
If a or b are nil (or null or None), the problem doesn't make sense so return false.
The two arrays have the same size (> 0) given as parameter in function comp.





CHALLENGE 03:

Write a JavaScript program to create a new string adding "Py" in front of a given string. 
If the given string begins with "Py" then return the original string.

string_check(stringName) returns 'Py' + stringName, if the first two letters in stringName do not contain 'Py'.
string_check(stringName) returns stringName, if the first two letters contain a 'Py'. 

NOTE: 
if the stringName is null or undefined(enters in an integer, the function should return false
